<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <!--++++++++++++++++++++++++++++++++++++++++++++++-->
        <!-- Start : Check userId, appId and subscription -->
        <set-variable name="requestBody" value="@{
            try {
                JObject reqBody = (JObject)context.Request.Body.As<JObject>();
                return reqBody;
            } catch(Exception err) {
                return null;
            }
        }" />
        <set-variable name="subscription" value="@(context.Request.Headers.GetValueOrDefault("x-aia-apikey",""))" />
        <set-variable name="autherization-profile" value="@(context.Request.Headers.GetValueOrDefault("Apim-AutherizationProfile_ignore","Dummy"))" />
        <set-variable name="appId-all" value="{{appId-all}}" />
        <set-variable name="userId-appId-subscription-relation-set1" value="{{userId-appId-subscription-relation-set1}}" />
        <set-variable name="userId-appId-subscription-relation-set2" value="{{userId-appId-subscription-relation-set2}}" />
        <set-variable name="userId-appId-subscription-relation-set3" value="{{userId-appId-subscription-relation-set3}}" />
        <set-variable name="validateResult" value="@{
            JObject result = new JObject(
                new JProperty("errorMsg", null)
                , new JProperty("accessTokenLifeTime", -1)
            );
           
            //validate input
            String userId = null;
            JArray appIdList = null;
            String subscription = null;
            try {
                JObject reqBody = (JObject) context.Variables["requestBody"];
                if(reqBody==null){
                    return "Invalid userId, appId or subscription";
                }
                userId = (String) reqBody.GetValue("userId");
                appIdList = (JArray) reqBody.GetValue("appId");
                subscription = (String) context.Variables["subscription"];
                if(userId==null
                        || appIdList==null || appIdList.Count==0
                        || subscription==null || subscription==""
                    ){
                   
                    result["errorMsg"] = "Invalid userId, appId or subscription";
                    return result;
                }
            } catch(Exception err) {
                result["errorMsg"] = "Error - "+err;
                return result;
            }
 
            //load permission setup
            for(int iLoop=0; iLoop<3; iLoop = iLoop+1){
                JObject permissionJson = null;
                try {
                    String permissionStr = (String) context.Variables["userId-appId-subscription-relation-set"+(iLoop+1)];
                    permissionJson = JObject.Parse(permissionStr);
                } catch(Exception err){
                    result["errorMsg"] = "Error - Please check name value 'userId-appId-subscription-relation'";
                    return result;
                }
 
                //check permission
                try {
                    JObject permissionUserId = (JObject) permissionJson.GetValue("userId-"+userId);
                    if(permissionUserId==null){
                        result["errorMsg"] = "Invalid userId, appId or subscription";
                        continue;
                    }
                   
                    int accessTokenLifeTime = -1;
                    try {
                        accessTokenLifeTime = (int) permissionUserId.GetValue("accessTokenLifeTime");
                    } catch(Exception err){
                    }
                   
                    JArray permissionSubscription = (JArray) permissionUserId.GetValue("subscription");
                    JArray permissionAppId = (JArray) permissionUserId.GetValue("appId");
                    if(
                            permissionSubscription==null || permissionSubscription.Count==0
                            || permissionAppId==null || permissionAppId.Count==0
                        ){
                        result["errorMsg"] = "Invalid userId, appId or subscription";
                        return result;
                    }
                   
                    //special role --> all permission
                    if(permissionAppId.Count==1){
                        if( ((String)permissionAppId[0]).Equals("All") ){
                            try {
                                String appIdAll = (String) context.Variables["appId-all"];
                                permissionAppId = JArray.Parse(appIdAll);
                            } catch(Exception err){
                                result["errorMsg"] = "Error - Please check name value 'appId-all'";
                                return result;
                            }
                        }
                    }
                                       
                    //validate subscription
                    {
                        Boolean isFound = false;
                        for(int i=0; i<permissionSubscription.Count; i++){
                            if( ((String)permissionSubscription[i]).Equals(subscription) ){
                                isFound = true;
                                break;
                            }
                        }
                        if(!isFound){
                            result["errorMsg"] = "Invalid userId, appId or subscription";
                            return result;
                        }
                    }
                   
                    //validate appIdList
                    {
                        for(int i=0; i<appIdList.Count; i++){
                            Boolean isFound = false;
                            for(int j=0; j<permissionAppId.Count; j++){
                                if( ((String)permissionAppId[j]).Equals((String)appIdList[i]) ){
                                    isFound = true;
                                    break;
                                }
                            }
                            if(!isFound){
                                result["errorMsg"] = "Invalid userId, appId or subscription";
                                return result;
                            }
                        }
                    }
                    result["errorMsg"] = null;
                    result["accessTokenLifeTime"] = accessTokenLifeTime;
                   
                    //tokenStratergy
                    String tokenStratergy = (String) permissionUserId.GetValue("tokenStratergy");
                    result["tokenStratergy"] = tokenStratergy;
                    return result;
                } catch(Exception err) {
                    result["errorMsg"] = "Error - "+err;
                    return result;
                }
            }
            return result;
        }" />
        <choose>
            <when condition="@(((String)((JObject)context.Variables["validateResult"])["errorMsg"]) == null ? false : true)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="Access-Control-Allow-Credentials" exists-action="override">
                        <value>true</value>
                    </set-header>
                    <set-header name="Access-Control-Allow-Headers" exists-action="override">
                        <value>*</value>
                    </set-header>
                    <set-header name="Access-Control-Allow-Origin" exists-action="override">
                        <value>*</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        JObject resBody = new JObject(
                            new JProperty("returnCode", "E"), 
                            new JProperty("returnMessage", ((JObject)context.Variables["validateResult"])["errorMsg"]), 
                            new JProperty("statusCode", "401"), 
                            new JProperty("errorCode", "T-001")
                        );
                        return resBody.ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        <!-- End : Check userId, appId and subscription -->
        <!--++++++++++++++++++++++++++++++++++++++++++++-->
        <!--+++++++++++++++++++++++++++++++-->
        <!-- Start : Check singleton token -->
        <set-variable name="singletonCacheKey" value="@{
 
            String subscription = (String)context.Variables["subscription"];
            String autherizationProfile = (String)context.Variables["autherization-profile"];
            JObject reqBody = (JObject) context.Variables["requestBody"];
            JArray appId = (JArray) reqBody.GetValue("appId");
            String appIdListStr = "";
            for(int j=0; j<appId.Count; j++){
                appIdListStr += "$$"+appId[j]+"$$";
            }
               
            String singletonCacheKey = "api[TokenManager]__subscription["+subscription+"]__appIdListStr["+appIdListStr+"]__autherizationProfile["+autherizationProfile+"]";
            return singletonCacheKey;
        }" />
        <choose>
            <when condition="@{
                try {
                    JObject validateResult = (JObject) context.Variables["validateResult"];
                    String tokenStratergy = (String) validateResult.GetValue("tokenStratergy");
                    if(tokenStratergy=="singleton"){
                        return true;
                    }
                } catch(Exception err) {
                }
                return false;
            }">
                <cache-lookup-value key="@{
                        String singletonCacheKey = (String) context.Variables["singletonCacheKey"];
                        return singletonCacheKey;
                    }" variable-name="singletonTokenInfo" caching-type="internal" />
            </when>
        </choose>
        <!-- End : Check singleton token -->
        <!--+++++++++++++++++++++++++++++++-->
        <!--+++++++++++++++++++++++-->
        <!-- Start : Set tokenInfo -->
        <choose>
            <when condition="@{
                try{
                    JObject singletonTokenInfo = (JObject) context.Variables["singletonTokenInfo"];
                    String isAlwayGenNewToken = (String)context.Request.Headers.GetValueOrDefault("isAlwayGenNewToken", "");
                    if(singletonTokenInfo==null || isAlwayGenNewToken=="Y"){
                        return true;
                    }
                    int expireIn = (int) singletonTokenInfo.GetValue("expireIn");
                    DateTime tokenIssueTime = (DateTime) singletonTokenInfo.GetValue("tokenIssueTime");
                   
                    DateTime tokenExpireTime = tokenIssueTime.AddSeconds(expireIn);
                    int diffInSeconds = (int) (tokenExpireTime - DateTime.Now).TotalSeconds;
                    if(diffInSeconds<180){
                        return true;
                    }
                } catch(Exception e){
                    return true;
                }
                return false;
            }">
                <set-variable name="apim-default-accessToken-lifeTime" value="{{apim-default-accessToken-lifeTime}}" />
                <set-variable name="accessTokenLifeTime" value="@{
                    int lifeTime = 0;
                    try {
                        JObject validateResult = (JObject) context.Variables["validateResult"];
                        lifeTime = (int) validateResult.GetValue("accessTokenLifeTime");
                    } catch(Exception err) {
                    }
                    if(lifeTime<=0){
                        lifeTime = Convert.ToInt32((String)context.Variables["apim-default-accessToken-lifeTime"]);
                    }
                    return lifeTime;
                }" />
                <set-variable name="accessToken" value="@{
                    char[] chars = "abcdefghijklmnopqrstuvwxyz0123456789".ToCharArray();
 
                    Random rand = new Random();
                    String token = "";
                    for(int i=0; i<50; i++){
                        int num = rand.Next(0, chars.Length);
                        token = token+chars[num].ToString();
                    }
                    return token;
                }" />
                <set-variable name="accessTokenInfo" value="@{
                    String accessToken = (String) context.Variables["accessToken"];
                    int accessTokenLifeTime = (int) context.Variables["accessTokenLifeTime"];
                   
                    JObject accessTokenInfo = new JObject(
                        new JProperty("accessToken", accessToken)
                        , new JProperty("tokenType","Bearer")
                        , new JProperty("expireIn", accessTokenLifeTime)
                        , new JProperty("tokenIssueTime", DateTime.Now)
                    );
 
                    return accessTokenInfo;
                }" />
                <set-variable name="accessTokenCacheKey" value="@{
                    JObject reqBody = (JObject) context.Variables["requestBody"];
                    String subscription = (String) context.Variables["subscription"];
                    String accessToken = (String) context.Variables["accessToken"];
                    String cacheKey = "api[TokenManager]__subscription["+subscription+"]__accessToken["+accessToken+"]";
                    return cacheKey;
                }" />
                <cache-store-value
                    key="@{
                        return (String) context.Variables["accessTokenCacheKey"];
                    }" 
                    value="@{
                        JObject reqBody = (JObject) context.Variables["requestBody"];
                        JArray appId = (JArray) reqBody.GetValue("appId");
                        return appId;
                    }" 
                    duration="@{
                        int accessTokenLifeTime = (int) context.Variables["accessTokenLifeTime"];
                        return (int) accessTokenLifeTime+10;
                    }" 
                    caching-type="internal" />
                <cache-store-value 
                    key="@{
                        return (String) context.Variables["accessTokenCacheKey"]+"_____accessTokenInfo";
                    }" 
                    value="@{
                        JObject accessTokenInfo = (JObject) context.Variables["accessTokenInfo"];
                        return accessTokenInfo;
                    }" 
                    duration="@{
                        int accessTokenLifeTime = (int) context.Variables["accessTokenLifeTime"];
                        return (int) accessTokenLifeTime+10;
                    }" 
                    caching-type="internal" />
                <cache-store-value 
                    key="@{
                        return (String) context.Variables["accessTokenCacheKey"]+"_____autherizationProfile";
                    }" 
                    value="@{
                        return (String) context.Variables["autherization-profile"];
                    }" 
                    duration="@{
                        int accessTokenLifeTime = (int) context.Variables["accessTokenLifeTime"];
                        return (int) accessTokenLifeTime+10;
                    }" 
                    caching-type="internal" />
                <cache-store-value 
                    key="@{
                        return (String) context.Variables["singletonCacheKey"];
                    }" 
                    value="@{
                        JObject accessTokenInfo = (JObject) context.Variables["accessTokenInfo"];
                        return accessTokenInfo;
                    }" 
                    duration="@{
                        int accessTokenLifeTime = (int) context.Variables["accessTokenLifeTime"];
                        return (int) accessTokenLifeTime;
                    }" 
                    caching-type="internal" />
                <!--+++++++++++++++++++++-->
                <!-- Start : check token -->
                <cache-lookup-value key="@{
                        return (String) context.Variables["accessTokenCacheKey"];
                    }" variable-name="appIdFromCache" caching-type="internal" />
                <cache-lookup-value key="@{
                        return (String) context.Variables["accessTokenCacheKey"]+"_____accessTokenInfo";
                    }" variable-name="accessTokenInfoFromCache" caching-type="internal" />
                <cache-lookup-value key="@{
                        return (String) context.Variables["accessTokenCacheKey"]+"_____autherizationProfile";
                    }" variable-name="autherizationProfileFromCache" caching-type="internal" />
                <choose>
                    <when condition="@{
                        try {
                            JObject reqBody = (JObject) context.Variables["requestBody"];
                            JArray appIdList = (JArray) reqBody.GetValue("appId");
                            JArray appIdFromCache = (JArray) context.Variables["appIdFromCache"];
                            JObject accessTokenInfoFromCache = (JObject) context.Variables["accessTokenInfoFromCache"];
                            String autherizationProfileFromCache = (String) context.Variables["autherizationProfileFromCache"];
                            if(appIdFromCache==null){
                                return true;
                            }
                            if(accessTokenInfoFromCache==null){
                                return true;
                            }
                            if(autherizationProfileFromCache==null){
                                return true;
                            }
                            if(appIdFromCache.Count!=appIdList.Count){
                                return true;
                            }
                            for(int i=0; i<appIdList.Count; i++){
                                Boolean isFound = false;
                                for(int j=0; j<appIdFromCache.Count; j++){
                                    if( ((String)appIdFromCache[j]).Equals((String)appIdList[i]) ){
                                        isFound = true;
                                        break;
                                    }
                                }
                                if(!isFound){
                                    return true;
                                }
                            }
                            return false;
                        } catch(Exception err){
                            return true;
                        }
                    }">
                        <cache-remove-value key="@{
                                return (String) context.Variables["singletonCacheKey"];
                            }" caching-type="internal" />
                        <cache-remove-value key="@{
                                return (String) context.Variables["accessTokenCacheKey"];
                            }" caching-type="internal" />
                        <cache-remove-value key="@{
                                return (String) context.Variables["accessTokenCacheKey"]+"_____accessTokenInfo";
                            }" caching-type="internal" />
                        <cache-remove-value key="@{
                                return (String) context.Variables["accessTokenCacheKey"]+"_____autherizationProfile";
                            }" caching-type="internal" />
                        <return-response>
                            <set-status code="500" reason="success" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                JObject accessTokenInfo = (JObject) context.Variables["accessTokenInfo"];
                                JObject resBody = new JObject(
                                    new JProperty("returnCode","E")
                                    , new JProperty("returnMessage","Please try again. There is problem with token cache.")
                                    , new JProperty("statusCode", "500")
                                );
                                return resBody.ToString();
                            }</set-body>
                        </return-response>
                    </when>
                </choose>
                <!-- End : check token -->
                <!--+++++++++++++++++++-->
            </when>
            <otherwise>
                <set-variable name="accessTokenInfo" value="@{
                    JObject singletonTokenInfo = (JObject) context.Variables["singletonTokenInfo"];
                    int expireIn = (int) singletonTokenInfo.GetValue("expireIn");
                    DateTime tokenIssueTime = (DateTime) singletonTokenInfo.GetValue("tokenIssueTime");
                   
                    DateTime tokenExpireTime = tokenIssueTime.AddSeconds(expireIn);
                    int diffInSeconds = (int) (tokenExpireTime - DateTime.Now).TotalSeconds;
                   
                    singletonTokenInfo["expireIn"] = diffInSeconds;
                    return singletonTokenInfo;
                }" />
            </otherwise>
        </choose>
        <!-- End : Set tokenInfo -->
        <!--++++++++++++++++++++++-->
        <base />
        <return-response>
            <set-status code="200" reason="success" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                JObject accessTokenInfo = (JObject) context.Variables["accessTokenInfo"];
                JObject resBody = new JObject(
                    new JProperty("returnCode","S")
                    , new JProperty("returnMessage","success")
                    , new JProperty("statusCode", "200")
                    , new JProperty("accessTokenInfo",accessTokenInfo)
                );
                return resBody.ToString();
            }</set-body>
        </return-response>
    </inbound>
    <backend>
        <!--++++++++++++++++++++++++++++++++++++-->
        <!-- Start : Set timeout - TemplateRest -->
        <forward-request timeout="{{default-timeout}}" />
        <!-- End : Set timeout - TemplateRest -->
        <!--++++++++++++++++++++++++++++++++++-->
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <!--++++++++++++++++++++++++++++++++++++++++++-->
        <!-- Start : Set error respose - TemplateRest -->
        <return-response>
            <set-status code="@(context.Response.StatusCode)" reason="@(context.LastError.Reason)" />
            <set-header name="Access-Control-Allow-Credentials" exists-action="override">
                <value>true</value>
            </set-header>
            <set-header name="Access-Control-Allow-Headers" exists-action="override">
                <value>*</value>
            </set-header>
            <set-header name="Access-Control-Allow-Origin" exists-action="override">
                <value>*</value>
            </set-header>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                JObject body = new JObject();
                body.Add(new JProperty("status", "E"));
                body.Add(new JProperty("message", (String) context.LastError.Message));
                body.Add(new JProperty("errorSource", (String) context.LastError.Source));
                body.Add(new JProperty("errorReason", (String) context.LastError.Reason));
                body.Add(new JProperty("errorMessage", (String) context.LastError.Message));
                body.Add(new JProperty("errorScope", (String) context.LastError.Scope));
                body.Add(new JProperty("errorPath", (String) context.LastError.Path));
                body.Add(new JProperty("errorPolicyId", (String) context.LastError.PolicyId));
                return body.ToString();
            }</set-body>
        </return-response>
        <!-- End : Set error respose - TemplateRest -->
        <!--++++++++++++++++++++++++++++++++++++++++-->
    </on-error>
</policies>
